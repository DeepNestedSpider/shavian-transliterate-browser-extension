/**
 * Core transliteration engine interface and factory
 */
import type { POSTaggedToken } from './posTagger';
import { handleWordPunctuation, isPunctuationProcessed, extractOriginalWord } from './punctuationHandler';

export interface TransliterationEngine {
  transliterate(text: string): string;
  transliterateWord(word: string): string;
  reverseTransliterate(text: string): string;
  reverseTransliterateWord(word: string): string;
}

export type EngineType = 'readlexicon';

export class ReadlexiconEngine implements TransliterationEngine {
  private dictionary: Map<string, string> = new Map();
  private reverseDictionary: Map<string, string> = new Map();
  private previousWord: string = '';
  private previousPos: string = '';

  // Function word heuristics from original Python code
  // These handle pronunciation changes based on context
  private beftoMap: Record<string, string> = {
    have: 'êë®êëì', // "have to" -> "êë®êëì" (haf)
    has: 'êë®êëï', // "has to" -> "êë®êëï" (has)
    used: 'êëïêëë', // "used to" -> "êëïêëë" (st)
    unused: 'êëïêëë', // "unused to" -> "êëïêëë" (st)
    supposed: 'êëïêëë', // "supposed to" -> "êëïêëë" (st)
  };

  // Common function words that should have specific Shavian forms
  private functionWords: Record<string, string> = {
    and: 'êëØ', // "and" -> "êëØ" (n)
    of: 'êëù', // "of" -> "êëù" (v)
    the: 'êëû', // "the" -> "êëû" (th)
    to: 'êëë', // "to" -> "êëë" (t)
    a: 'êë©', // "a" -> "êë©" (uh)
    an: 'êë©êëØ', // "an" -> "êë©êëØ" (uh-n)
    in: 'êë¶êëØ', // "in" -> "êë¶êëØ" (in)
    on: 'êë™êëØ', // "on" -> "êë™êëØ" (on)
    at: 'êë®êëë', // "at" -> "êë®êëë" (at)
    is: 'êë¶êëü', // "is" -> "êë¶êëü" (iz)
    are: 'êë∏', // "are" -> "êë∏" (ar)
    was: 'êë¢êë™êëü', // "was" -> "êë¢êë™êëü" (woz)
    were: 'êë¢êëª', // "were" -> "êë¢êëª" (wer)
    for: 'êëì', // "for" -> "êëì" (f)
    with: 'êë¢êë¶êëû', // "with" -> "êë¢êë¶êëû" (with)
    by: 'êëöêë≤', // "by" -> "êëöêë≤" (by)
    from: 'êëìêëÆêë™êë•', // "from" -> "êëìêëÆêë™êë•" (from)
    had: 'êë£êë®êëõ', // "had" -> "êë£êë®êëõ" (had)
    have: 'êë£êë®êëù', // "have" -> "êë£êë®êëù" (hav)
    has: 'êë£êë®êëü', // "has" -> "êë£êë®êëü" (haz)
    would: 'êë¢êë´êëõ', // "would" -> "êë¢êë´êëõ" (wood)
    could: 'êëíêë´êëõ', // "could" -> "êëíêë´êëõ" (kood)
    should: 'êëñêë´êëõ', // "should" -> "êëñêë´êëõ" (shood)
    will: 'êë¢êë¶êë§', // "will" -> "êë¢êë¶êë§" (wil)
    can: 'êëíêë®êëØ', // "can" -> "êëíêë®êëØ" (kan)
    may: 'êë•êë±', // "may" -> "êë•êë±" (may)
    shall: 'êëñêë®êë§', // "shall" -> "êëñêë®êë§" (shal)
    do: 'êëõ', // "do" -> "êëõ" (d)
    does: 'êëõêë≥êëü', // "does" -> "êëõêë≥êëü" (duz)
    did: 'êëõêë¶êëõ', // "did" -> "êëõêë¶êëõ" (did)
    be: 'êëö', // "be" -> "êëö" (b)
    been: 'êëöêë∞êëØ', // "been" -> "êëöêë∞êëØ" (been)
    being: 'êëöêë∞êë¶êëô', // "being" -> "êëöêë∞êë¶êëô" (being)
    this: 'êëûêë¶êëï', // "this" -> "êëûêë¶êëï" (this)
    that: 'êëûêë®êëë', // "that" -> "êëûêë®êëë" (that)
    which: 'êë¢êë¶êëó', // "which" -> "êë¢êë¶êëó" (wich)
    who: 'êë£', // "who" -> "êë£" (h)
    what: 'êë¢êë™êëë', // "what" -> "êë¢êë™êëë" (wot)
    when: 'êë¢êëßêëØ', // "when" -> "êë¢êëßêëØ" (wen)
    where: 'êë¢êë∫', // "where" -> "êë¢êë∫" (wer)
    why: 'êë¢êë≤', // "why" -> "êë¢êë≤" (wy)
    how: 'êë£êë¨', // "how" -> "êë£êë¨" (how)
    not: 'êëØêë™êëë', // "not" -> "êëØêë™êëë" (not)
    no: 'êëØêë¥', // "no" -> "êëØêë¥" (no)
    yes: 'êëòêëßêëï', // "yes" -> "êëòêëßêëï" (yes)
    all: 'êë∑êë§', // "all" -> "êë∑êë§" (awl)
    any: 'êëßêëØêë¶', // "any" -> "êëßêëØêë¶" (eny)
    some: 'êëïêë≥êë•', // "some" -> "êëïêë≥êë•" (sum)
    one: 'êë¢êë≥êëØ', // "one" -> "êë¢êë≥êëØ" (wun)
    two: 'êëë', // "two" -> "êëë" (t)
    three: 'êëîêëÆ', // "three" -> "êëîêëÆ" (thr)
    four: 'êëìêëπ', // "four" -> "êëìêëπ" (for)
    five: 'êëìêë≤êëù', // "five" -> "êëìêë≤êëù" (fyv)
  };

  constructor(dictionaryData?: Record<string, string>) {
    if (dictionaryData) {
      this.loadDictionary(dictionaryData);
    }
  }

  private loadDictionary(data: Record<string, string>): void {
    for (const [key, value] of Object.entries(data)) {
      this.dictionary.set(key.toLowerCase(), value);
      // Build reverse dictionary for Shavian to English transliteration
      // Clean the Shavian value and use as key
      const cleanShavian = value.replace(/^[.:]+|[.:]+$/g, '');
      if (cleanShavian) {
        this.reverseDictionary.set(cleanShavian, key.toLowerCase());
      }
    }

    // Add function words to reverse dictionary
    for (const [english, shavian] of Object.entries(this.functionWords)) {
      const cleanShavian = shavian.replace(/^[.:]+|[.:]+$/g, '');
      if (cleanShavian) {
        this.reverseDictionary.set(cleanShavian, english);
      }
    }
  }

  transliterate(text: string): string {
    // Reset context at the beginning of each transliteration
    this.previousWord = '';
    this.previousPos = '';

    // Split by whitespace but preserve words with attached punctuation
    const words = text.split(/(\s+)/);
    return words
      .map(segment => {
        if (segment.match(/^\s+$/)) {
          return segment;
        } else if (segment.match(/^[.,:;!?"'()\[\]{}<>]+$/)) {
          // Pure punctuation (excluding hyphens and ellipses): do not transliterate
          return segment;
        } else if (segment.length > 0) {
          const result = this.transliterateWord(segment);
          // Update previous word context (only for actual words, not punctuation)
          // Check if result is not in punctuation{word} format before updating context
          if (segment.match(/\w/) && !isPunctuationProcessed(result)) {
            this.previousWord = segment.toLowerCase().replace(/[^\w']/g, '');
          }
          return result;
        }
        return segment;
      })
      .join('');
  }

  /**
   * Transliterate a sentence using an array of POS-tagged tokens.
   * Each token should have { text, pos }.
   */
  transliterateWithPOSTags(tokens: POSTaggedToken[]): string {
    this.previousWord = '';
    this.previousPos = '';
    return tokens
      .map(token => {
        if (token.text.match(/^\s+$/)) {
          return token.text;
        } else if (token.text.length > 0) {
          const result = this.transliterateWord(token.text, token.pos);
          if (token.text.match(/\w/)) {
            this.previousWord = token.text.toLowerCase();
            this.previousPos = token.pos;
          }
          return result;
        }
        return token.text;
      })
      .join('');
  }

  /**
   * Transliterate a single word, optionally using a POS tag for heteronyms.
   */
  transliterateWord(word: string, pos?: string): string {
    if (!word || word.trim() === '') return word;
    const originalWord = word;

    // Check for punctuation first - if word has non-alphabetic characters, handle with punctuation handler
    const punctuationResult = handleWordPunctuation(word);
    if (punctuationResult !== word) {
      return punctuationResult;
    }

    // Handle compound words with hyphens
    if (word.includes('-') && !word.match(/^[-]+$/)) {
      const parts = word.split('-');
      const transliteratedParts = parts.map(part => {
        if (part.trim() === '') return part;
        return this.transliterateWordInternal(part, pos);
      });
      return transliteratedParts.join('-');
    }

    // Handle words with ellipses
    if (word.includes('‚Ä¶')) {
      const parts = word.split('‚Ä¶');
      const transliteratedParts = parts.map(part => {
        if (part.trim() === '') return part;
        return this.transliterateWordInternal(part, pos);
      });
      return transliteratedParts.join('‚Ä¶');
    }

    return this.transliterateWordInternal(word, pos);
  }

  /**
   * Internal method to transliterate a single word part without compound handling
   */
  private transliterateWordInternal(word: string, pos?: string): string {
    if (!word || word.trim() === '') return word;
    
    const originalWord = word;
    const clean = word.toLowerCase().replace(/[^\w']/g, '');

    // 1. Function words check (highest priority)
    if (clean in this.functionWords) {
      return this.functionWords[clean]!.replace(/^:+|:+$/g, '');
    }

    // 2. Handle "to" after specific function words (befto logic)
    if (clean === 'to' && this.previousWord in this.beftoMap) {
      return this.beftoMap[this.previousWord]!.replace(/^:+|:+$/g, '');
    }

    // 3. Prefer POS-specific dictionary entry if POS is provided
    if (pos && this.dictionary.has(clean + '_' + pos)) {
      const result = this.dictionary.get(clean + '_' + pos);
      if (result) return result.replace(/^[.:]+|[.:]+$/g, '');
    }

    // 4. Check for direct dictionary match first (including contractions with underscore)
    if (this.dictionary.has(clean + '_')) {
      const result = this.dictionary.get(clean + '_');
      if (result) return result.replace(/^[.:]+|[.:]+$/g, '');
    }

    // 5. Check direct dictionary match
    let result = this.dictionary.get(clean);
    if (result) {
      return result.replace(/^[.:]+|[.:]+$/g, '');
    }

    // 6. Handle contractions with suffix patterns from dictionary
    if (word.includes("'")) {
      const parts = word.split("'");
      if (parts.length === 2 && parts[0] && parts[1]) {
        const base = parts[0].toLowerCase();
        const suffix = "'" + parts[1].toLowerCase();
        // Look for suffix pattern in dictionary
        const suffixKey = '$' + suffix;
        if (this.dictionary.has(suffixKey)) {
          const baseTransliteration = this.transliterateWord(base);
          const suffixTransliteration = this.dictionary.get(suffixKey)!;
          return (
            baseTransliteration +
            suffixTransliteration.replace(/^[.:]+|[.:]+$/g, '').replace(/^'/, '')
          ).replace(/^:+|:+$/g, '');
        }
      }
    }

    // 7. Prefix rule: ^prefix
    for (const [key, value] of this.dictionary.entries()) {
      if (key.startsWith('^')) {
        const prefix = key.slice(1);
        if (clean.startsWith(prefix)) {
          return (value + this.transliterateWord(clean.slice(prefix.length))).replace(
            /^:+|:+$/g,
            ''
          );
        }
      }
    }

    // 8. Suffix rule: $suffix (for non-contraction suffixes)
    for (const [key, value] of this.dictionary.entries()) {
      if (key.startsWith('$') && !key.includes("'")) {
        const suffix = key.slice(1);
        if (clean.endsWith(suffix)) {
          return (
            this.transliterateWord(clean.slice(0, clean.length - suffix.length)) +
            value.replace(/^[.:]+|[.:]+$/g, '')
          ).replace(/^:+|:+$/g, '');
        }
      }
    }

    // 9. Always dot: Capitalized word in dict
    if (this.dictionary.has(originalWord)) {
      result = this.dictionary.get(originalWord);
      if (result) return ('¬∑' + result.replace(/^[.:]+|[.:]+$/g, '')).replace(/^:+|:+$/g, '');
    }

    // 10. Part-of-speech specific entries (word_POS) if not already checked
    if (!pos) {
      const posVariants = ['_VB', '_NN', '_NNS', '_JJ', '_RB'];
      for (const p of posVariants) {
        if (this.dictionary.has(clean + p)) {
          result = this.dictionary.get(clean + p);
          if (result) return result.replace(/^[.:]+|[.:]+$/g, '');
        }
      }
    }

    // 11. Handle word ending variations for better matching
    if (this.dictionary.has(clean + '.')) {
      result = this.dictionary.get(clean + '.');
      if (result) return result.replace(/^[.:]+|[.:]+$/g, '');
    }

    // 12. Fallback - return original word if no transliteration found
    return word;
  }

  addToDictionary(word: string, transliteration: string): void {
    this.dictionary.set(word.toLowerCase(), transliteration);
    // Also add to reverse dictionary
    const cleanShavian = transliteration.replace(/^[.:]+|[.:]+$/g, '');
    if (cleanShavian) {
      this.reverseDictionary.set(cleanShavian, word.toLowerCase());
    }
  }

  getDictionarySize(): number {
    return this.dictionary.size;
  }

  /**
   * Reverse transliterate (Shavian to English) text
   */
  reverseTransliterate(text: string): string {
    const words = text.split(/(\s+)/);
    return words
      .map(segment => {
        if (segment.match(/^\s+$/)) {
          return segment;
        } else if (segment.match(/^[.,:;!?"'()\[\]{}<>]+$/)) {
          // Punctuation (excluding hyphens and ellipses): do not transliterate
          return segment;
        } else if (segment.length > 0) {
          return this.reverseTransliterateWord(segment);
        }
        return segment;
      })
      .join('');
  }

  /**
   * Reverse transliterate (Shavian to English) a single word
   */
  reverseTransliterateWord(word: string): string {
    if (!word || word.trim() === '') return word;

    // Check if word is in punctuation{word} format first - if so, extract and return original
    if (isPunctuationProcessed(word)) {
      return extractOriginalWord(word);
    }

    // Handle compound words with hyphens (but only if none of the parts look like punctuation format)
    if (word.includes('-') && !word.match(/^[-]+$/)) {
      const parts = word.split('-');
      // Check if any part looks like malformed punctuation format - if so, don't process as compound
      const hasPartialPunctuationFormat = parts.some(part => 
        part.includes('{') || part.includes('}') || 
        (part.includes('punctuation') && (word.includes('{') || word.includes('}')))
      );
      
      if (!hasPartialPunctuationFormat) {
        const transliteratedParts = parts.map(part => {
          if (part.trim() === '') return part;
          return this.reverseTransliterateWordInternal(part);
        });
        return transliteratedParts.join('-');
      }
    }

    // Handle words with ellipses
    if (word.includes('‚Ä¶')) {
      const parts = word.split('‚Ä¶');
      const transliteratedParts = parts.map(part => {
        if (part.trim() === '') return part;
        return this.reverseTransliterateWordInternal(part);
      });
      return transliteratedParts.join('‚Ä¶');
    }

    return this.reverseTransliterateWordInternal(word);
  }

  /**
   * Internal method to reverse transliterate a single word part without compound handling
   */
  private reverseTransliterateWordInternal(word: string): string {
    if (!word || word.trim() === '') return word;

    // Check if this is a punctuation-processed word and extract the original
    if (isPunctuationProcessed(word)) {
      return extractOriginalWord(word);
    }

    // Remove punctuation for lookup but preserve original for fallback
    const clean = word.replace(/^[^\u{10450}-\u{1047F}]*|[^\u{10450}-\u{1047F}]*$/gu, '');

    // Direct lookup in reverse dictionary
    const result = this.reverseDictionary.get(clean);
    if (result) {
      return result;
    }

    // Try without leading/trailing markers (¬∑, etc.)
    const cleanerShavian = clean.replace(/^[¬∑‚Äπ‚Ä∫]+|[¬∑‚Äπ‚Ä∫]+$/g, '');
    const cleanerResult = this.reverseDictionary.get(cleanerShavian);
    if (cleanerResult) {
      return cleanerResult;
    }

    // Fallback - return original word if no reverse transliteration found
    return word;
  }
}

export class TransliterationEngineFactory {
  private static readlexiconInstance: ReadlexiconEngine | null = null;

  static async createEngine(type: EngineType): Promise<TransliterationEngine> {
    switch (type) {
      case 'readlexicon':
        if (!this.readlexiconInstance) {
          // Dynamically import dictionary data
          const { readlexDict } = await import('../dictionaries/readlex');
          this.readlexiconInstance = new ReadlexiconEngine(readlexDict);
        }
        return this.readlexiconInstance;

      default:
        throw new Error(`Unknown engine type: ${type}`);
    }
  }

  static async getEngineFromSettings(): Promise<TransliterationEngine> {
    let engineType: EngineType = 'readlexicon';

    if (typeof chrome !== 'undefined' && chrome.storage) {
      try {
        const settings = await chrome.storage.sync.get(['transliterationEngine']);
        engineType = settings.transliterationEngine || 'readlexicon';
      } catch (error) {
        console.warn('Failed to get engine settings, using default:', error);
      }
    }

    return this.createEngine(engineType);
  }
}
